const { inTransaction } = require("@openzeppelin/test-helpers/src/expectEvent");
const { web3 } = require("@openzeppelin/test-helpers/src/setup");
const { expectRevert } = require("@openzeppelin/test-helpers");

//truffle injected artifacts object by default so no need to import it 
const Wallet = artifacts.require('Wallet');

//accounts: array of addresses generated by the local dev blockchain of truffle
contract('Wallet', (accounts) => {
    let wallet;

    //runs before each test
    beforeEach(async () => {
        wallet = await Wallet.new([accounts[0], accounts[1], accounts[2]], 2);
        
        //truffle injected web3 object by default so no need to import it
        //send ether (1000wei) to the wallet for transactions
        await web3.eth.sendTransaction({from: accounts[0], to: wallet.address, value: 1000});
    });

    //it: used for each test
    it('should have correct approvers and quorum', async () => {
        const approvers = await wallet.getApprovers();
        const quorum = await wallet.quorum();
        
        assert(approvers.length === 3);
        assert(approvers[0] === accounts[0]);
        assert(approvers[1] === accounts[1]);
        assert(approvers[2] === accounts[2]);

        //numbers in truffle is wrapped with BN.js (big number) and so need to convert it to js number
        //so we use toNumber()
        //numbers that are fields of struct are not wrapped in BN.js objects but are string instead
        assert(quorum.toNumber() === 2);
    });

    //happy path
    //create transfer
    it('should create transfers', async () => {
        await wallet.createTransfer(100, accounts[5], {from: accounts[0]});
        const transfers = await wallet.getTransfers();
        assert(transfers.length === 1);
        assert(transfers[0].id === '0');
        assert(transfers[0].amount === '100');
        assert(transfers[0].to === accounts[5]);
        assert(transfers[0].approvers === '0');
        assert(transfers[0].sent === false);
    });

    //unhappy path
    //it.only: will only run this test for speed
    it('should NOT create transfers if sender is not approved', async () => {
        //We can use try & catch and compare with the msg
        //Other option is to use the open test helpers library openzeppelin/test-helpers
        // try {
        //     await wallet.createTransfer(100, accounts[5], {from: accounts[4]});
        // }
        // catch(e) {
        //     console.log(e);
        // }

        await expectRevert(
            wallet.createTransfer(100, accounts[5], {from: accounts[4]}),
            'only approver allowed'
        );        
    });

    //approve transfer
    it('should increment approvals', async () => {
        await wallet.createTransfer(100, accounts[5], {from: accounts[0]});
        await wallet.approveTransfer(0, {from: accounts[0]});
        const transfers = await wallet.getTransfers();
        const balance = await web3.eth.getBalance(wallet.address);
        assert(transfers[0].approvers === '1');
        assert(transfers[0].sent === false);
        assert(balance === '1000');
    });

    //approve transfer
    it('should send transfer if quorum reached', async () => {
        //use web3.utils.toBN as we may transfer big numbers like 1 Eth (10 ^ 18 gwei)
        const balanceBefore = web3.utils.toBN(await web3.eth.getBalance(accounts[6]));
        await wallet.createTransfer(100, accounts[6], {from: accounts[0]});
        await wallet.approveTransfer(0, {from: accounts[0]});
        await wallet.approveTransfer(0, {from: accounts[1]});
        const balanceAfter = web3.utils.toBN(await web3.eth.getBalance(accounts[6]));
        assert(balanceAfter.sub(balanceBefore).toNumber() === 100);
    });

    it('should NOT approve transfer if sender is not approved', async () => {
        await wallet.createTransfer(100, accounts[6], {from: accounts[0]});
        await expectRevert(
            wallet.approveTransfer(0, {from: accounts[4]}),
            'only approver allowed'
        );
    });

    it('should NOT approve transfer if transfer is already sent', async () => {
        await wallet.createTransfer(100, accounts[6], {from: accounts[0]});
        await wallet.approveTransfer(0, {from: accounts[0]});
        await wallet.approveTransfer(0, {from: accounts[1]});
        await expectRevert(
            wallet.approveTransfer(0, {from: accounts[2]}),
            'transfer has already been sent'
        );
    });

    // it('should NOT approve transfer twice', async () => {
    //     await wallet.createTransfer(100, accounts[6], {from: accounts[0]});
    //     await wallet.approveTransfer(0, {from: accounts[0]});
    //     await expectRevert(
    //         wallet.approveTransfer(0, {from: accounts[0]}),
    //         'cannot approve transfer twice'
    //     );
    // });
});